const express = require("express");
const cors = require("cors");
const fs = require("fs").promises;
const path = require("path");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

// --- CONFIGURATION ---
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";
const WORKSPACE_DIR = path.resolve(__dirname, '..', '..', 'generated-projects'); // Sandboxed project directory

// Ensure the workspace directory exists
fs.mkdir(WORKSPACE_DIR, { recursive: true });

// Helper function to create a secure, sandboxed file path
const getSafePath = (filePath) => {
  if (!filePath || typeof filePath !== 'string') {
    throw new Error("Invalid path provided.");
  }
  const resolvedPath = path.resolve(WORKSPACE_DIR, filePath);
  if (!resolvedPath.startsWith(WORKSPACE_DIR)) {
    throw new Error("Access denied: File path is outside the allowed workspace.");
  }
  return resolvedPath;
};

// --- TOOL DEFINITIONS AND HANDLERS ---
const tools = [
  {
    type: "function",
    function: {
      name: "listFiles",
      description: "List all files and directories recursively in the project workspace.",
      parameters: { type: "object", properties: {} },
    },
  },
  {
    type: "function",
    function: {
      name: "readFile",
      description: "Read the contents of a specific file in the workspace.",
      parameters: {
        type: "object",
        properties: { path: { type: "string", description: "The relative path to the file." } },
        required: ["path"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "writeFile",
      description: "Write content to a specific file in the workspace, creating it if it doesn't exist.",
      parameters: {
        type: "object",
        properties: {
          path: { type: "string", description: "The relative path to the file." },
          content: { type: "string", description: "The content to write to the file." },
        },
        required: ["path", "content"],
      },
    },
  },
];

const toolHandlers = {
  listFiles: async () => {
    const files = await fs.readdir(WORKSPACE_DIR, { withFileTypes: true, recursive: true });
    return files.map(file => path.join(file.path.replace(WORKSPACE_DIR, ''), file.name)).join('\n');
  },
  readFile: async ({ path: filePath }) => fs.readFile(getSafePath(filePath), "utf-8"),
  writeFile: async ({ path: filePath, content }) => {
    const safePath = getSafePath(filePath);
    await fs.mkdir(path.dirname(safePath), { recursive: true });
    await fs.writeFile(safePath, content, "utf-8");
    return `Successfully wrote ${content.length} bytes to ${filePath}`;
  },
};

// --- MASTER SYSTEM PROMPT ---
const systemPrompt = `You are the Lead Project Manager of an elite AI development team. Your role is to understand the user's high-level goal and orchestrate a team of specialized AI agents to build, test, and debug the application. Your only way to interact with the environment is by calling the tools you have been provided.

Your Core Directives:
1.  **Plan First:** For any non-trivial request, first create a plan. Then, execute the plan step-by-step using your tools.
2.  **Use Tools to Build:** Use the 'writeFile' tool to create and modify files. Use 'readFile' to inspect existing code, and 'listFiles' to understand the project structure.
3.  **Verify Your Work:** After writing a file, always use the 'readFile' tool immediately to confirm that the content was written as expected before telling the user.
4.  **Think Step-by-Step:** Execute one logical action at a time. Do not try to write multiple files in a single turn. Plan, write, verify. Plan, write, verify.`;

// --- MAIN CHAT ENDPOINT WITH TOOL-USE LOOP ---
app.post("/api/chat", async (req, res) => {
  const history = req.body.messages || [];
  if (history.length === 0) return res.status(400).json({ error: "Messages are required" });

  try {
    let continueConversation = true;
    while (continueConversation) {
      const aiResponse = await fetch(PERPLEXITY_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json", "Authorization": `Bearer ${process.env.PERPLEXITY_API_KEY}` },
        body: JSON.stringify({
          model: "sonar-pro",
          system: systemPrompt,
          messages: history,
          tools: tools,
        }),
      });

      const data = await aiResponse.json();
      const choice = data.choices && data.choices[0];
      if (!choice) throw new Error("Invalid response from AI service");

      const { message } = choice;
      history.push(message); // Add AI's response to history

      if (message.tool_calls && message.tool_calls.length > 0) {
        // AI wants to use a tool
        const toolResults = [];
        for (const toolCall of message.tool_calls) {
          const handler = toolHandlers[toolCall.function.name];
          if (handler) {
            const args = JSON.parse(toolCall.function.arguments);
            const result = await handler(args);
            toolResults.push({ tool_call_id: toolCall.id, content: result });
          }
        }
        history.push({ role: "tool", content: toolResults }); // Add tool results to history
        // Continue the loop to let the AI process the tool results
      } else {
        // AI is done, send final response to user
        continueConversation = false;
        res.json(choice);
      }
    }
  } catch (error) {
    console.error("Tool-use loop error:", error);
    res.status(500).json({ error: "An error occurred during the conversation: " + error.message });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Backend server with tool-use capabilities is running on http://localhost:${PORT}`);
});
