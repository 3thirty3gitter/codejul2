const express = require("express");
const cors = require("cors");
const fs = require("fs").promises;
const path = require("path");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

// --- CONFIGURATION ---
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";
const WORKSPACE_DIR = path.resolve(__dirname, '..', '..', 'generated-projects');

fs.mkdir(WORKSPACE_DIR, { recursive: true });

// Helper to create a secure file path
const getSafePath = (filePath) => {
  if (!filePath || typeof filePath !== 'string') throw new Error("Invalid path provided.");
  const resolvedPath = path.resolve(WORKSPACE_DIR, filePath);
  if (!resolvedPath.startsWith(WORKSPACE_DIR)) throw new Error("Access denied.");
  return resolvedPath;
};

// --- AGENT TOOLS ---
const tools = [
  { type: "function", function: { name: "listFiles", description: "List all files and directories recursively in the project workspace.", parameters: { type: "object", properties: {} } } },
  { type: "function", function: { name: "readFile", description: "Read the contents of a specific file.", parameters: { type: "object", properties: { path: { type: "string", description: "The relative path to the file." } }, required: ["path"] } } },
  { type: "function", function: { name: "writeFile", description: "Write content to a file, creating it if necessary.", parameters: { type: "object", properties: { path: { type: "string", description: "The relative path to the file." }, content: { type: "string", description: "The content to write." } }, required: ["path", "content"] } } }
];

const toolHandlers = {
  listFiles: async () => (await fs.readdir(WORKSPACE_DIR, { withFileTypes: true, recursive: true })).map(file => path.join(file.path.replace(WORKSPACE_DIR, ''), file.name)).join('\n') || 'Workspace is empty.',
  readFile: async ({ path: filePath }) => fs.readFile(getSafePath(filePath), "utf-8"),
  writeFile: async ({ path: filePath, content }) => {
    const safePath = getSafePath(filePath);
    await fs.mkdir(path.dirname(safePath), { recursive: true });
    await fs.writeFile(safePath, content, "utf-8");
    return `Successfully wrote ${content.length} bytes to ${filePath}`;
  },
};

// --- DEFINITIVE MASTER SYSTEM PROMPT (DevOpsAgent) ---
const systemPrompt = `You are DevOpsAgent, an autonomous full-stack engineer. Your existence is confined to a local file system, and your only purpose is to build software for the user by following a strict, unchangeable process. You cannot search the web.

**Your MANDATORY Operational Workflow:**

**Phase 1: Interpret & Summarize**
1.  Receive the user's request.
2.  Your first response MUST be a summary of the user's goals, constraints, and deliverables, formatted as 2-3 bullet points.

**Phase 2: Plan**
1.  Immediately following the summary, present a high-level development plan broken into clear phases (e.g., Architecture, UI Mock-up, Implementation, Testing).
2.  Present this plan as a numbered list.
3.  Your response MUST end with the exact question: "Does this plan look good? Would you like a visual example (wireframe, Mermaid chart, or HTML mock-up) before we start coding?"
4.  AWAIT USER APPROVAL. Do not proceed until the user approves the plan.

**Phase 3: Visual Example (Conditional)**
1.  If the user requests a visual example, your next action is to generate one using the 'writeFile' tool to create an HTML, Mermaid, or text file.
2.  After creating the visual, report success and await final approval on the plan.

**Phase 4: Implementation**
1.  Once the plan is approved, you will begin executing it step-by-step using your tools ('listFiles', 'readFile', 'writeFile').
2.  For each step, state the action you are taking (e.g., "Implementing the React component for the header...") and then call the appropriate tool.
3.  After every 'writeFile' operation, you MUST immediately call 'readFile' on the same file to verify the content was written correctly. This is non-negotiable.
4.  Report the outcome of each step and await user confirmation before proceeding to the next phase of the approved plan.`;

// --- MAIN CHAT ENDPOINT WITH ROBUST ERROR LOGGING ---
app.post("/api/chat", async (req, res) => {
  const history = req.body.messages || [];
  if (history.length === 0) return res.status(400).json({ error: "Messages are required" });

  try {
    let continueConversation = true;
    while (continueConversation) {
      const response = await fetch(PERPLEXITY_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json", "Authorization": `Bearer ${process.env.PERPLEXITY_API_KEY}` },
        body: JSON.stringify({
          model: "r1-1776",
          system: systemPrompt,
          messages: history,
          tools: tools,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Perplexity API Error:", JSON.stringify(errorData, null, 2));
        throw new Error(`API request failed with status ${response.status}: ${errorData.error?.message || 'Unknown API error'}`);
      }

      const data = await response.json();
      const choice = data.choices && data.choices[0];
      
      if (!choice) {
        console.error("Invalid success response structure:", JSON.stringify(data, null, 2));
        throw new Error("Invalid response structure from AI service");
      }

      const { message } = choice;
      history.push(message);

      if (message.tool_calls && message.tool_calls.length > 0) {
        const toolResults = [];
        for (const toolCall of message.tool_calls) {
          const handler = toolHandlers[toolCall.function.name];
          if (handler) {
            const args = JSON.parse(toolCall.function.arguments);
            const result = await handler(args);
            toolResults.push({ tool_call_id: toolCall.id, content: result });
          }
        }
        history.push({ role: "tool", content: toolResults });
      } else {
        continueConversation = false;
        res.json(choice);
      }
    }
  } catch (error) {
    console.error("Tool-use loop error:", error.message);
    res.status(500).json({ error: "An error occurred during the conversation: " + error.message });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`DevOpsAgent is online on http://localhost:${PORT}`);
});
