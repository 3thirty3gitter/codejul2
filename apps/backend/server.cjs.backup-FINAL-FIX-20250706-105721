const express = require("express");
const cors = require("cors");
const fs = require("fs").promises;
const path = require("path");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

// --- CONFIGURATION ---
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";
const WORKSPACE_DIR = path.resolve(__dirname, '..', '..', 'generated-projects');

fs.mkdir(WORKSPACE_DIR, { recursive: true });

// Helper to create a secure file path
const getSafePath = (filePath) => {
  if (!filePath || typeof filePath !== 'string') throw new Error("Invalid path provided.");
  const resolvedPath = path.resolve(WORKSPACE_DIR, filePath);
  if (!resolvedPath.startsWith(WORKSPACE_DIR)) throw new Error("Access denied.");
  return resolvedPath;
};

// --- AGENT TOOLS ---
const tools = [
  { type: "function", function: { name: "listFiles", description: "List all files and directories recursively in the project workspace.", parameters: { type: "object", properties: {} } } },
  { type: "function", function: { name: "readFile", description: "Read the contents of a specific file.", parameters: { type: "object", properties: { path: { type: "string", description: "The relative path to the file." } }, required: ["path"] } } },
  { type: "function", function: { name: "writeFile", description: "Write content to a file, creating it if necessary.", parameters: { type: "object", properties: { path: { type: "string", description: "The relative path to the file." }, content: { type: "string", description: "The content to write." } }, required: ["path", "content"] } } }
];

const toolHandlers = {
  listFiles: async () => (await fs.readdir(WORKSPACE_DIR, { withFileTypes: true, recursive: true })).map(file => path.join(file.path.replace(WORKSPACE_DIR, ''), file.name)).join('\n'),
  readFile: async ({ path: filePath }) => fs.readFile(getSafePath(filePath), "utf-8"),
  writeFile: async ({ path: filePath, content }) => {
    const safePath = getSafePath(filePath);
    await fs.mkdir(path.dirname(safePath), { recursive: true });
    await fs.writeFile(safePath, content, "utf-8");
    return `Successfully wrote ${content.length} bytes to ${filePath}`;
  },
};

// --- MASTER SYSTEM PROMPT (SYNTHESIZED FROM ALL PROVIDED DOCS) ---
const systemPrompt = `You are an autonomous AI software engineer. You exist entirely within a sandboxed file system. Your only purpose is to execute user requests by calling the tools you have been provided.

**Core Directives & Absolute Constraints:**

1.  **Identity & Scope:** You are a builder, not a conversationalist or a search engine. You do not have access to the internet. Your only perception of the world is the file system, which you can interact with via your tools.
2.  **MANDATORY PROHIBITION:** You are strictly forbidden from answering questions, providing explanations, or engaging in any form of web search. If the user asks a question that cannot be answered by manipulating files, you must respond with: "My function is to build and modify code, not to provide information. Please provide a development task."
3.  **Tool-Centric Operation:** Your entire operational capacity is defined by these three tools: \`listFiles\`, \`readFile\`, and \`writeFile\`. Every response you generate must either be a call to one of these tools or a confirmation of a completed task.
4.  **Iterative Workflow (The Vibe Coding Loop):** You must operate in a strict, iterative loop as inspired by the "vibe coding" methodology.
    a. **Plan (Internal Monologue):** Silently determine the single next logical file operation to complete the user's request.
    b. **Execute:** Call the chosen tool (\`listFiles\`, \`readFile\`, or \`writeFile\`).
    c. **Verify (MANDATORY):** After every single \`writeFile\` operation, your immediate next action MUST be to call \`readFile\` on the *exact same file* to confirm the content was written correctly. This step is not optional.
    d. **Report:** Inform the user of the successful outcome of the tool call and await the next command. Do not chain multiple different tool calls in one turn. One action, one verification.
5.  **Task Completion:** You will not assume follow-up actions. Once a requested task (e.g., "create a file") is complete and verified, you will stop and await further instructions. Do not commit code or run tests unless explicitly instructed to do so via new tools we may add later.`;

// --- MAIN CHAT ENDPOINT WITH TOOL-USE LOOP ---
app.post("/api/chat", async (req, res) => {
  const history = req.body.messages || [];
  if (history.length === 0) return res.status(400).json({ error: "Messages are required" });

  try {
    let continueConversation = true;
    while (continueConversation) {
      const aiResponse = await fetch(PERPLEXITY_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json", "Authorization": `Bearer ${process.env.PERPLEXITY_API_KEY}` },
        body: JSON.stringify({
          model: "llama-3-sonar-large-32k-chat",
          system: systemPrompt,
          messages: history,
          tools: tools,
        }),
      });

      const data = await aiResponse.json();
      const choice = data.choices && data.choices[0];
      if (!choice) throw new Error("Invalid response from AI service");

      const { message } = choice;
      history.push(message);

      if (message.tool_calls && message.tool_calls.length > 0) {
        const toolResults = [];
        for (const toolCall of message.tool_calls) {
          const handler = toolHandlers[toolCall.function.name];
          if (handler) {
            const args = JSON.parse(toolCall.function.arguments);
            const result = await handler(args);
            toolResults.push({ tool_call_id: toolCall.id, content: result });
          }
        }
        history.push({ role: "tool", content: toolResults });
      } else {
        continueConversation = false;
        res.json(choice);
      }
    }
  } catch (error) {
    console.error("Tool-use loop error:", error);
    res.status(500).json({ error: "An error occurred during the conversation: " + error.message });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Autonomous AI Software Engineer is online on http://localhost:${PORT}`);
});
