import dotenv from 'dotenv';

// Ensure environment variables are loaded
dotenv.config();

interface Agent {
  name: string;
  model: string;
  temperature: number;
  systemPrompt: string;
  keywords: string[];
}

export class AITeam {
  private perplexityApiKey: string | null;
  private apiBaseUrl = 'https://api.perplexity.ai/chat/completions';

  private agents: Agent[] = [
    {
      name: 'Elite Coder Agent',
      model: 'sonar',
      temperature: 0.7,
      systemPrompt: 'You are an elite software developer with expertise in React, TypeScript, Node.js, and modern web development. Generate clean, production-ready code with best practices.',
      keywords: ['code', 'react', 'typescript', 'component', 'function', 'class', 'api', 'frontend', 'backend']
    },
    {
      name: 'System Architect Agent', 
      model: 'sonar',
      temperature: 0.6,
      systemPrompt: 'You are a senior system architect specializing in scalable application design, tech stack selection, and project structure.',
      keywords: ['architecture', 'design', 'structure', 'scalable', 'database', 'deployment']
    }
  ];

  constructor() {
    // Load API key with multiple fallback methods
    this.perplexityApiKey = process.env.PERPLEXITY_API_KEY || 
                           process.env['PERPLEXITY_API_KEY'] || 
                           null;
    
    console.log('?? Environment check:', {
      nodeEnv: process.env.NODE_ENV,
      hasApiKey: !!this.perplexityApiKey,
      keyPrefix: this.perplexityApiKey ? this.perplexityApiKey.substring(0, 8) + '...' : 'none'
    });
    
    if (!this.perplexityApiKey) {
      console.warn('?? PERPLEXITY_API_KEY not set - AI agents will use fallback responses');
    } else {
      console.log('? AITeam initialized with Perplexity integration');
    }
  }

  async routeQuery(query: string, preferredAgent?: string): Promise<string> {
    try {
      const agent = this.selectAgent(query, preferredAgent);
      console.log(`?? Routing to: ${agent.name}`);
      
      if (this.perplexityApiKey) {
        return await this.callPerplexityAPI(query, agent);
      } else {
        return this.generateFallbackResponse(query, agent);
      }
    } catch (error) {
      console.error('? AI Team routing failed:', error);
      return this.generateErrorResponse(query);
    }
  }

  private selectAgent(query: string, preferredAgent?: string): Agent {
    if (preferredAgent) {
      const agent = this.agents.find(a => a.name === preferredAgent);
      if (agent) return agent;
    }

    const queryLower = query.toLowerCase();
    
    for (const agent of this.agents) {
      if (agent.keywords.some(keyword => queryLower.includes(keyword))) {
        return agent;
      }
    }

    return this.agents[0];
  }

  private async callPerplexityAPI(query: string, agent: Agent): Promise<string> {
    const response = await fetch(this.apiBaseUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.perplexityApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: agent.model,
        messages: [
          { role: 'system', content: agent.systemPrompt },
          { role: 'user', content: query }
        ],
        temperature: agent.temperature,
        max_tokens: 4000
      })
    });

    if (!response.ok) {
      throw new Error(`Perplexity API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content || 'No response generated';
    
    console.log(`? ${agent.name} response: ${content.substring(0, 100)}...`);
    return content;
  }

  private generateFallbackResponse(query: string, agent: Agent): string {
    console.log(`? Using fallback response for ${agent.name}`);
    
    if (query.includes('package.json')) {
      return JSON.stringify({
        name: 'ai-generated-app',
        version: '1.0.0',
        dependencies: { react: '^18.2.0', typescript: '^5.0.0' }
      }, null, 2);
    }
    
    return `// AI Generated Code\n// Query: ${query}\n// Generated by ${agent.name} (Fallback Mode)\n\nconsole.log('CodePilot AI - Generated Code');`;
  }

  private generateErrorResponse(query: string): string {
    return `# Error Response\n\nAn error occurred while processing: "${query}"\n\nPlease check API configuration and connectivity.`;
  }

  getAvailableAgents(): string[] {
    return this.agents.map(agent => agent.name);
  }

  isAIActive(): boolean {
    return !!this.perplexityApiKey;
  }
}

