const express = require("express");
const cors = require("cors");
const fs = require("fs").promises;
const path = require("path");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

// --- CONFIGURATION ---
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";
const WORKSPACE_DIR = path.resolve(__dirname, '..', '..', 'generated-projects');

fs.mkdir(WORKSPACE_DIR, { recursive: true });

const getSafePath = (filePath) => {
  if (!filePath || typeof filePath !== 'string') throw new Error("Invalid path provided.");
  const resolvedPath = path.resolve(WORKSPACE_DIR, filePath);
  if (!resolvedPath.startsWith(WORKSPACE_DIR)) throw new Error("Access denied.");
  return resolvedPath;
};

const tools = [
  { type: "function", function: { name: "listFiles", description: "List all files and directories in the workspace.", parameters: { type: "object", properties: {} } } },
  { type: "function", function: { name: "readFile", description: "Read the content of a file.", parameters: { type: "object", properties: { path: { type: "string" } }, required: ["path"] } } },
  { type: "function", function: { name: "writeFile", description: "Write content to a file.", parameters: { type: "object", properties: { path: { type: "string" }, content: { type: "string" } }, required: ["path", "content"] } } }
];

const toolHandlers = {
  listFiles: async () => (await fs.readdir(WORKSPACE_DIR, { withFileTypes: true, recursive: true })).map(file => path.join(file.path.replace(WORKSPACE_DIR, ''), file.name)).join('\n') || 'Workspace is empty.',
  readFile: async ({ path: filePath }) => fs.readFile(getSafePath(filePath), "utf-8"),
  writeFile: async ({ path: filePath, content }) => {
    const safePath = getSafePath(filePath);
    await fs.mkdir(path.dirname(safePath), { recursive: true });
    await fs.writeFile(safePath, content, "utf-8");
    return `Successfully wrote to ${filePath}`;
  },
};

const systemPrompt = `You are DevOpsAgent, an autonomous full-stack engineer. Your existence is confined to a local file system, and your only purpose is to build software for the user by following a strict, unchangeable, multi-phase process. You are forbidden from searching the web.

**Your MANDATORY Operational Workflow:**

**Phase 1: Interpret & Summarize**
Your first response to any new user request MUST begin with a summary of the user's goals, constraints, and deliverables, formatted as 2-3 bullet points.

**Phase 2: Plan**
Immediately following the summary, you MUST present a high-level development plan broken into clear phases (e.g., Architecture, UI Mock-up, Implementation, Testing). This MUST be a numbered list. Your response for this phase MUST end with the exact question: "Does this plan look good? Would you like a visual example (wireframe, Mermaid chart, or HTML mock-up) before we start coding?" You will then STOP and await user approval.

**Phase 3: Visual Example (Conditional)**
If, and only if, the user asks for a visual example, your next action is to generate one. Use your 'writeFile' tool to create an HTML or Mermaid file. After creating the visual, report success and await final approval on the plan.

**Phase 4: Implementation**
Once the plan is approved, you will begin executing it step-by-step using your tools ('listFiles', 'readFile', 'writeFile'). For each step, state the action you are taking (e.g., "Implementing the React component for the header...") and then call the appropriate tool.

**Non-Negotiable Rule:** After every 'writeFile' operation, your immediate next action MUST be to call 'readFile' on the exact same file to verify that the content was written correctly. This is not optional.

You will report the outcome of each step and await user confirmation ("continue", "proceed", etc.) before proceeding to the next phase of the approved plan.`;

// --- MAIN CHAT ENDPOINT WITH ROBUST ERROR LOGGING ---
app.post("/api/chat", async (req, res) => {
  const history = req.body.messages || [];
  if (history.length === 0) return res.status(400).json({ error: "Messages are required" });

  try {
    const response = await fetch(PERPLEXITY_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json", "Authorization": `Bearer ${process.env.PERPLEXITY_API_KEY}` },
        body: JSON.stringify({
            model: "r1-1776", // <-- DEFINITIVE FIX: Using the correct offline model from the documentation.
            system: systemPrompt,
            messages: history,
            tools: tools,
        }),
    });

    if (!response.ok) {
        const errorData = await response.json();
        console.error("Perplexity API Error:", JSON.stringify(errorData, null, 2));
        throw new Error(`API request failed with status ${response.status}: ${errorData.error?.message || 'Unknown API error'}`);
    }

    const data = await response.json();
    res.json(data);

  } catch (error) {
    console.error("Chat processing error:", error.message);
    res.status(500).json({ error: "An error occurred during the conversation: " + error.message });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`DevOpsAgent is online on http://localhost:${PORT}`);
});
