interface BuildRequest {
  description: string;
  requirements?: string[];
  style?: "modern" | "classic" | "minimal" | "bold";
  target?: "web" | "mobile" | "desktop";
  userId?: string;
}

interface ProjectFeature {
  id: string;
  title: string;
  description: string;
  priority: "high" | "medium" | "low";
  estimatedHours: number;
  dependencies: string[];
  status: "pending" | "in-progress" | "completed";
}

interface ProjectPlan {
  id: string;
  title: string;
  description: string;
  techStack: string[];
  features: ProjectFeature[];
  estimatedTime: string;
  visualPreview?: string;
  created: Date;
}

const API_BASE = process.env.NODE_ENV === 'production' 
  ? 'https://your-production-api.com'
  : 'http://localhost:5000';

export class ApplicationBuilderAPI {
  async generatePlan(request: BuildRequest): Promise<{ success: boolean; plan: ProjectPlan; message: string }> {
    try {
      console.log('??? Sending build request to YOUR backend:', API_BASE);
      const response = await fetch(`${API_BASE}/api/builder/plan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('? Plan generated by YOUR backend:', data.plan.title);
      return data;
    } catch (error) {
      console.error('? Error generating plan:', error);
      throw error;
    }
  }

  async getPlan(planId: string): Promise<{ success: boolean; plan: ProjectPlan }> {
    try {
      const response = await fetch(`${API_BASE}/api/builder/plan/${planId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching plan:', error);
      throw error;
    }
  }

  async startBuild(planId: string): Promise<{ success: boolean; buildId: string; status: string; files: any[] }> {
    try {
      console.log('?? Starting build with YOUR backend for plan:', planId);
      const response = await fetch(`${API_BASE}/api/builder/build/${planId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('? Build completed by YOUR backend:', data.buildId, 'Files:', data.files?.length || 0);
      return data;
    } catch (error) {
      console.error('? Error starting build:', error);
      throw error;
    }
  }
}

export const applicationBuilderAPI = new ApplicationBuilderAPI();
export type { BuildRequest, ProjectPlan, ProjectFeature };
